# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless
# app and org for use with dashboard.serverless.com
app: vehicle-ingestion
org: matt3r

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9

# you can overwrite defaults here
#  stage: dev
  region: us-west-2
# you can define service wide environment variables here
#  environment:
  iamRoleStatements:
      - Effect: Allow
        Action:
          - "sns:*"
        Resource:
          - "arn:aws:sns:us-west-2:963414178352:Matt3rDplSns"

# you can add packaging information here
#package:

functions:
  parse-canserver-log:
    handler: parse_canserver_log.lambda_handler
    timeout: 180
    memorySize: 512
    environment:
      LANDING_BUCKET: matt3r-canserver-us-west-2
      TZ: UTC
    role: 'arn:aws:iam::963414178352:role/haoming-lambda-parquet-test-role'
#    events:
#      - sqs: arn:aws:sqs:us-west-2:963414178352:ParseCanserver
    layers:
      - 'arn:aws:lambda:us-west-2:336392948345:layer:AWSSDKPandas-Python39:1'

  infer-aautopilot-states:
    handler: infer_autopilot_states.lambda_handler
    timeout: 180
    memorySize: 256
    environment:
      RAW_BUCKET: matt3r-canserver-us-west-2
      LANDING_BUCKET: matt3r-canserver-event-us-west-2
      TZ: UTC
    role: 'arn:aws:iam::963414178352:role/haoming-lambda-parquet-test-role'
#    events:
#      - sqs: arn:aws:sqs:us-west-2:963414178352:InferAutopilotStates
    layers:
      - 'arn:aws:lambda:us-west-2:336392948345:layer:AWSSDKPandas-Python39:1'

  infer-stationary-states:
    handler: infer-stationary-states.lambda_handler
    timeout: 180
    memorySize: 256
    environment:
      RAW_BUCKET: matt3r-canserver-us-west-2
      LANDING_BUCKET: matt3r-canserver-event-us-west-2
      TZ: UTC
    role: 'arn:aws:iam::963414178352:role/haoming-lambda-parquet-test-role'
#    events:
#      - sqs: arn:aws:sqs:us-west-2:963414178352:InferStationaryStates
    layers:
      - 'arn:aws:lambda:us-west-2:336392948345:layer:AWSSDKPandas-Python39:1'

# you can add CloudFormation resource templates here
resources:
  Resources:
    Matt3rDplSns:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: "matt3r-dpl-sns"
        Subscription:
          - Endpoint:
              Fn::GetAtt:
                - "ParseCanserver"
                - "Arn"
            Protocol: "sqs"
          - Endpoint:
              Fn::GetAtt:
                - "InferAutopilotStates"
                - "Arn"
            Protocol: "sqs"
          - Endpoint:
              Fn::GetAtt:
                - "InferStationaryStates"
                - "Arn"
            Protocol: "sqs"

    ParseCanserver:
      Type: AWS::SQS::Queue
      Properties:
        DelaySeconds: 0
        MaximumMessageSize: 1024
        MessageRetentionPeriod: 60
        QueueName: parse-canserver
        VisibilityTimeout: 360

    InferAutopilotStates:
      Type: AWS::SQS::Queue
      Properties:
        DelaySeconds: 0
        MaximumMessageSize: 1024
        MessageRetentionPeriod: 60
        QueueName: infer-autopilot-states
        VisibilityTimeout: 360

    InferStationaryStates:
      Type: AWS::SQS::Queue
      Properties:
        DelaySeconds: 0
        MaximumMessageSize: 1024
        MessageRetentionPeriod: 60
        QueueName: infer-stationary-states
        VisibilityTimeout: 360

    SNSTopicQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-messages1"
              Effect: Allow
              Principal:
                Service: "sns.amazonaws.com"
              Resource: !GetAtt
                - "ParseCanserver"
                - "Arn"
              Action:
                - "sqs:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": "arn:aws:sns:us-west-2:963414178352:Matt3rDplSns"
        Queues:
          - Ref: "ParseCanserver"


    SNSTopicQueuePolicy2:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-messages2"
              Effect: Allow
              Principal:
                Service: "sns.amazonaws.com"
              Resource: !GetAtt
                - "InferAutopilotStates"
                - "Arn"
              Action:
                - "sqs:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": "arn:aws:sns:us-west-2:963414178352:Matt3rDplSns"
        Queues:
          - Ref: "InferAutopilotStates"

    SNSTopicQueuePolicy3:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-messages3"
              Effect: Allow
              Principal:
                Service: "sns.amazonaws.com"
              Resource: !GetAtt
                - "InferStationaryStates"
                - "Arn"
              Action:
                - "sqs:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": "arn:aws:sns:us-west-2:963414178352:Matt3rDplSns"
        Queues:
          - Ref: "InferStationaryStates"